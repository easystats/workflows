# To understand the aim and scope of this workflow, have a look at these slides:
# https://indrajeetpatil.github.io/preventive-r-package-care/

#name: check-random-test-order

on:
  workflow_call:

jobs:
  check-random-test-order:
    runs-on: windows-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: "devel"
          use-public-rspm: true

      - name: Install packages from source
        run: |
          install.packages(c("Matrix", "TMB"), type = "source")
        shell: Rscript {0}

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          pak-version: devel
          upgrade: '"TRUE"'
          extra-packages: |
            any::BH
            any::purrr
            mmrm=?ignore-before-r=100.0.0
            TMB=?ignore-before-r=100.0.0
            Matrix=?ignore-before-r=100.0.0
            glmmTMB=?ignore-before-r=100.0.0
            local::.

      - name: Install mmrm and glmmTMB from source
        run: |
          install.packages(c("mmrm", "glmmTMB"), type = "source")
        shell: Rscript {0}

      - name: Run Tests in Random Order
        run: |
          options(crayon.enabled = TRUE)
          withr::local_envvar(TESTTHAT_PARALLEL = "FALSE")
          library(cli)
          library(glue)
          pkgload::load_all(".", quiet = TRUE)
          test_script_paths <- testthat::find_test_scripts("tests/testthat")
          seed <- sample.int(1e6, 1L)
          cli_inform("Chosen seed for the current test run: {seed}")
          set.seed(seed)
          randomized_test_script_paths <- sample(test_script_paths)
          any_test_failures <- FALSE
          any_test_errors <- FALSE
          test_path <- function(path) {
            report <- as.data.frame(testthat::test_file(path, reporter = "silent"))
            has_test_failures <- any(report$failed == 1L)
            has_test_errors <- any(report$error == 1L)
            if (has_test_failures) {
              cli_alert_danger(glue("Tests in `{path}` are failing."))
              any_test_failures <<- TRUE
              failed_tests <- tibble::as_tibble(subset(report, failed == 1L)[, c("test", "result")])
              print(glue::glue_data(failed_tests, "Test `{test}` is failing:\n{purrr::pluck(result, 1L, 1L)}"))
            }
            if (has_test_errors) {
              cli_alert_danger(glue("There was error while running tests in `{path}`."))
              any_test_errors <<- TRUE
              errored_tests <- tibble::as_tibble(subset(report, error == 1L)[, c("test", "result")])
              print(glue::glue_data(errored_tests, "Test `{test}` has error:\n{purrr::pluck(result, 1L, 1L)}"))
            }
            if (!has_test_failures && !has_test_errors) {
              cli_alert_success(glue("All tests passing in `{path}`."))
            }
          }
          cli_rule()
          cli_inform("Running tests in random order:")
          cli_rule()
          purrr::walk(randomized_test_script_paths, test_path)
          cli_rule()
          if (any_test_failures) {
            cli_abort("Tests in some files are failing.")
          }
          if (any_test_errors) {
            cli_abort("There was error while running tests in some files.")
          }
          if (!any_test_failures && !any_test_errors) {
            cli_alert_success("Tests from all files are passing!")
          }
          cli_rule()
        shell: Rscript {0}
